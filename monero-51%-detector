#!/usr/bin/env bash
################# SCRIPT CONFIGURATION #################
# path of bitmonero.log
LOG="$HOME/.bitmonero/bitmonero.log"

# skip the printing of [ok] blocks (true/false)
SKIP_OK="false"

# skip the printing of [fine] blocks (true/false)
SKIP_FINE="false"

# skip the printing of [concern] blocks (true/false)
SKIP_WARN="false"

########################################################

# no log
if [[ -e "$LOG" ]]; then
	echo "Error: no bitmonero.log found"
	exit 1
fi

# block reorg output
OUTPUT="$(grep -B1 "alternative blockchain size:.* w" "$LOG" | sed 's/--//g')"

# block reorg size
SIZE="$(echo "$OUTPUT" | grep "alternative blockchain size:.* w"| sed "s/[.*].*alternative/ alternative/g" | sed "s/ with.*//g")"
if [[ $OUTPUT = "" ]]; then
	echo "Error: Empty log file"
	exit 1
fi

# title
printf "\e[1;91m%s\n" "[Monero 51% Attack Detector]"
printf "\e[0;00m%s" "Timeframe: "
printf "$(printf "$OUTPUT" | head -n1 | awk '{print $1" "$2}') - "
printf "$(printf "$OUTPUT" | tail -n1 | awk '{print $1" "$2}')\n"

printf "\e[0;00m%s\n" "Log path: $LOG"

printf "\e[0;00m%s\n" "Skip [  ok  ]: $SKIP_OK"
printf "\e[0;00m%s\n" "Skip [ fine ]: $SKIP_FINE"
printf "\e[0;00m%s\n\n" "Skip [ warn ]: $SKIP_WARN"

# loop through every line
IFS=$'\n'
for i in $(printf "$SIZE") ;do
	reorg="$(printf "$i" | sed "s/.*: //g")"
	time="$(printf "$i" | awk '{print $1" "$2}')"
	height="$(grep "${time}.*###### REORGANIZE" "$LOG" | sed "s/[.*].*height://g" | awk '{print $3}')"
    if [[ $reorg -gt 5 ]]; then
        printf "\e[1;91m%s" "[DANGER]    "
		printf "\e[0m%s\n" "$time    height: $height    reorg size: $reorg"
		danger="true"
    elif [[ $reorg -gt 3 ]]; then
		warn="true"
		if [[ $SKIP_WARN != "true" ]]; then
	        printf "\e[1;33m%s" "[ warn ]    "
			printf "\e[0m%s\n" "$time    height: $height    reorg size: $reorg"
		fi
	elif [[ $reorg -gt 2 ]]; then
		fine="true"
		if [[ $SKIP_FINE != "true" ]]; then
	        printf "\e[1;37m%s" "[ fine ]    "
			printf "\e[0m%s\n" "$time    height: $height    reorg size: $reorg"
		fi
	elif [[ $reorg -lt 3 ]]; then
		if [[ $SKIP_OK != "true" ]]; then
			printf "\e[1;32m%s" "[  ok  ]    "
			printf "\e[0m%s\n" "$time    height: $height    reorg size: $reorg"
		fi
    fi
done

# verdict
echo
printf "\e[0;00m%s" "Verdict: "
if [[ $danger = true ]]; then
	printf "\e[1;91m%s\n" "[DANGER] - Monero is likely under attack"
	exit 1
elif [[ $warn = true ]]; then
	printf "\e[1;33m%s\n" "[ warn ] - Monero might be under attack"
	exit 1
elif [[ $fine = true ]]; then
	printf "\e[1;37m%s\n" "[ fine ] - Monero is fine"
	exit 0
else
	printf "\e[1;32m%s\n" "[  ok  ] - Monero is okay"
	exit 0
fi
